/*
 클래스와 구조체의 공통점
 1. 값을 저장할 프로퍼티를 선언할 수 있다.
 2. 함수적 기능을 하는 메서드를 선언 할 수 있다.
 3. 내부 값에 .을 사용하여 접근할 수 있다.
 4. 생성자를 사용해 초기 상태를 설정할 수 있다.
 5. extension을 사용하여 기능을 확장할 수 있다.
 6. Protocol을 채택하여 기능을 설정할 수 있다.
 
 클래스와 구조체의 차이점
 클래스
 1. 참조타입이다. (메모리 스택영역에는 포인터, 인스턴스메모리 주소만 할당된다.)
 2. ARC로 메모리를 관리한다. (힙 영역에 할당되기 떄문에 ARC)
 3. 상속이 가능하다.
 4. 타입 캐스팅을 통해 런타임에서 클래스 인스턴스의 타입을 확인할 수 있다.
 5. deinit을 사용하여. 클래스 인스턴스의 메모리 할당을 해제할 수 있다.
 6. 같은 클래스 인스턴스를 여러 개의 변수에 할당한 뒤 값을 변경 시키면 모든 변수에 영향을 준다. (메모리가 복사 됨)
 
 구조체
 1. 값 타입이다. ( 변수를 할당하면 스택영역에 값이 저장된다.)
 2. 구조체 변수를 새로운 변수에 할당할 때마다 새로운 구조체가 할당된다.
 3. 즉 같은 구조체를 여러 개의 변수에 할당한 뒤 값을 변경시키더라도 다른 변수에 영향을 주지 않는다. (값 자체를 복사)
 */

import UIKit

class SomeClass {
    var count: Int = 0
}

struct SomeSturct {
    var count: Int = 0
}


var class1 = SomeClass()
var class2 = class1
var class3 = class1

class3.count = 2
// 클래스는 참조타입이기 때문에 같은 클래스의 인스턴스를 할당한 변수를 값을 변경시키면 참조된 인스턴스의 값도 변경된다.
// 복사본과 원본의 값이 같다.
class1.count
 

var struct1 = SomeSturct()
var struct2 = struct1
var struct3 = struct1

struct2.count = 3
struct3.count = 4

// 값 타입이라 같은 인스턴스를 할당하더라도 매번 새로운 메모리가 할당되어 값을 변경하더라도 다른 구조체에 영향을 주지 않는다.
struct1.count
struct2.count
struct3.count
